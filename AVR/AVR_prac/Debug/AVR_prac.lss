
AVR_prac.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000172  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000081d  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f0  00000000  00000000  00000a95  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032e  00000000  00000000  00001185  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000014b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b6  00000000  00000000  00001518  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  000018ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000195e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  78:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <INIT_TIMER1>:

void Uart_TX(unsigned char data)
{
	while( !( UCSR0A & (1 << UDRE0) ) ); // 통신이 준비되면
	
	UDR0 = data; // 데이터 송신
  80:	e0 e8       	ldi	r30, 0x80	; 128
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	82 60       	ori	r24, 0x02	; 2
  88:	80 83       	st	Z, r24
  8a:	a1 e8       	ldi	r26, 0x81	; 129
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	8c 91       	ld	r24, X
  90:	88 61       	ori	r24, 0x18	; 24
  92:	8c 93       	st	X, r24
  94:	8c 91       	ld	r24, X
  96:	82 60       	ori	r24, 0x02	; 2
  98:	8c 93       	st	X, r24
  9a:	80 e4       	ldi	r24, 0x40	; 64
  9c:	9c e9       	ldi	r25, 0x9C	; 156
  9e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  a2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  a6:	80 81       	ld	r24, Z
  a8:	80 68       	ori	r24, 0x80	; 128
  aa:	80 83       	st	Z, r24
  ac:	84 b1       	in	r24, 0x04	; 4
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	84 b9       	out	0x04, r24	; 4
  b2:	08 95       	ret

000000b4 <Uart_Init>:
  b4:	e0 ec       	ldi	r30, 0xC0	; 192
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	80 83       	st	Z, r24
  be:	e5 ec       	ldi	r30, 0xC5	; 197
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 83       	st	Z, r24
  c6:	8f ec       	ldi	r24, 0xCF	; 207
  c8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  cc:	e2 ec       	ldi	r30, 0xC2	; 194
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	86 60       	ori	r24, 0x06	; 6
  d4:	80 83       	st	Z, r24
  d6:	e1 ec       	ldi	r30, 0xC1	; 193
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	80 61       	ori	r24, 0x10	; 16
  de:	80 83       	st	Z, r24
  e0:	80 81       	ld	r24, Z
  e2:	88 60       	ori	r24, 0x08	; 8
  e4:	80 83       	st	Z, r24
  e6:	08 95       	ret

000000e8 <Uart_RX>:
}


unsigned char Uart_RX(void)
{
	while( !( UCSR0A & (1 << RXC0) ) );
  e8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ec:	88 23       	and	r24, r24
  ee:	e4 f7       	brge	.-8      	; 0xe8 <Uart_RX>
	
	return UDR0;
  f0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  f4:	08 95       	ret

000000f6 <main>:
int main(void)

{
	unsigned char data;
	
	Uart_Init();
  f6:	0e 94 5a 00 	call	0xb4	; 0xb4 <Uart_Init>
	INIT_TIMER1();
  fa:	0e 94 40 00 	call	0x80	; 0x80 <INIT_TIMER1>
	data = Uart_RX();
  fe:	0e 94 74 00 	call	0xe8	; 0xe8 <Uart_RX>
	
	while (1) 
	{	
		switch(data)
 102:	82 36       	cpi	r24, 0x62	; 98
 104:	a1 f0       	breq	.+40     	; 0x12e <main+0x38>
 106:	83 36       	cpi	r24, 0x63	; 99
 108:	11 f1       	breq	.+68     	; 0x14e <main+0x58>
 10a:	81 36       	cpi	r24, 0x61	; 97
 10c:	d1 f7       	brne	.-12     	; 0x102 <main+0xc>
		{
			case 'a':
			{
				OCR1A = PULSE_MIN;			// 0도
 10e:	24 e1       	ldi	r18, 0x14	; 20
 110:	35 e0       	ldi	r19, 0x05	; 5
 112:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 116:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	33 ed       	ldi	r19, 0xD3	; 211
 11e:	90 e3       	ldi	r25, 0x30	; 48
 120:	21 50       	subi	r18, 0x01	; 1
 122:	30 40       	sbci	r19, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0x2a>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x34>
 12a:	00 00       	nop
 12c:	ea cf       	rjmp	.-44     	; 0x102 <main+0xc>
				_delay_ms(ROTATION_DELAY);
				break;
			}
			case 'b':
			{
				OCR1A = PULSE_MID;			// 90도
 12e:	28 eb       	ldi	r18, 0xB8	; 184
 130:	3b e0       	ldi	r19, 0x0B	; 11
 132:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 136:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 13a:	2f ef       	ldi	r18, 0xFF	; 255
 13c:	33 ed       	ldi	r19, 0xD3	; 211
 13e:	90 e3       	ldi	r25, 0x30	; 48
 140:	21 50       	subi	r18, 0x01	; 1
 142:	30 40       	sbci	r19, 0x00	; 0
 144:	90 40       	sbci	r25, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x4a>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0x54>
 14a:	00 00       	nop
 14c:	da cf       	rjmp	.-76     	; 0x102 <main+0xc>
				_delay_ms(ROTATION_DELAY);
				break;
			}
			case 'c':
			{
				OCR1A = PULSE_MAX;			// 180도
 14e:	2c e5       	ldi	r18, 0x5C	; 92
 150:	32 e1       	ldi	r19, 0x12	; 18
 152:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 156:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 15a:	2f ef       	ldi	r18, 0xFF	; 255
 15c:	33 ed       	ldi	r19, 0xD3	; 211
 15e:	90 e3       	ldi	r25, 0x30	; 48
 160:	21 50       	subi	r18, 0x01	; 1
 162:	30 40       	sbci	r19, 0x00	; 0
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <main+0x6a>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x74>
 16a:	00 00       	nop
 16c:	ca cf       	rjmp	.-108    	; 0x102 <main+0xc>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
